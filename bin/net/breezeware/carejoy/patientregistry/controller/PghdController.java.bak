package net.breezeware.carejoy.patientregistry.controller;

import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import lombok.extern.slf4j.Slf4j;
import net.breezeware.carejoy.patientregistry.entity.Patient;
import net.breezeware.carejoy.patientregistry.service.api.PatientRegistryService;
import net.breezeware.carejoy.pghd.entity.PatientPghdReading;
import net.breezeware.carejoy.pghd.service.api.PghdStagingService;
import net.breezeware.dynamo.util.usermgmt.CurrentUserDto;

@Controller
@Slf4j
@RequestMapping(value = "/pghd/*")
@PreAuthorize("hasAnyAuthority('CLINICIAN', 'CARETEAM_USER')")
public class PghdController {

    @Autowired
    PghdStagingService pghdStagingService;

    @Autowired
    PatientRegistryService patientRegistryService;

    /**
     * Retrieves all PGHD readings for a single patient.
     * 
     * @param patientUuid Unique ID to identify the Patient
     * @param type        Type of PGHD. For example: steps, BG,
     * @param model
     * @return
     */
    @RequestMapping(value = "/readings/{patientUuid}", method = RequestMethod.GET)
    public String viewPatientPghdReadings(@PathVariable String patientUuid, @RequestParam(name = "type") String type,
            Model model, HttpSession session) {
        log.info("Entering viewPatientPghd(). ");

        // get patient details
        Optional<Patient> patientOpt = patientRegistryService.retrievePatientByUuid(UUID.fromString(patientUuid));
        if (patientOpt.isPresent()) {

            // set patient details in model for rendering
            Patient patient = patientOpt.get();
            model.addAttribute("patient", patient);

            // get patient readings and set it in model
            Optional<List<PatientPghdReading>> readings = pghdStagingService
                    .retrievePatientPghdReadings(UUID.fromString(patientUuid), type);
            model.addAttribute("pghdReadings", readings.get());
            model.addAttribute("patientUuid", patientUuid);

            // set active nav in model
            model.addAttribute("activeNav", "browse");
            model.addAttribute("sideNav", "pghd-data");

            // set display date formatter
            CurrentUserDto currentUserDto = (CurrentUserDto) session.getAttribute("currentUser");
            String zoneId = currentUserDto.getUserTimeZoneId();

            DateTimeFormatter formatter = null;
            if (zoneId != null && zoneId.length() > 0) {
                // format dates according to user
                formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).withZone(ZoneId.of(zoneId));
            } else {
                formatter = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).withZone(ZoneId.of("UTC"));
            }
            model.addAttribute("displayDateFormatter", formatter);

            // return to view
            log.info("Leaving viewPatientPghd(). # of readings retrieved = {}", readings.get().size());
            return "registry/" + "reading-" + type.toLowerCase();
        } else {
            log.info("Leaving viewPatientPghd(). Patient with UUID could not found");

            // FIXME: NOTE: redirect to error page
            return "registry/" + "reading-" + type.toLowerCase();
        }
    }
}