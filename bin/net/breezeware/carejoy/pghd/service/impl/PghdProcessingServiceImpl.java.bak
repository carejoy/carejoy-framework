package net.breezeware.carejoy.pghd.service.impl;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.apache.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;

import lombok.extern.slf4j.Slf4j;
import net.breezeware.carejoy.pghd.entity.CarejoyOdmPghdData;
import net.breezeware.carejoy.pghd.entity.PatientPghdFeed;
import net.breezeware.carejoy.pghd.entity.PatientPghdReading;
import net.breezeware.carejoy.pghd.entity.PghdFeed;
import net.breezeware.carejoy.pghd.respository.PatientPghdReadingRepository;
import net.breezeware.carejoy.pghd.service.api.PghdProcessingService;
import net.breezeware.carejoy.pghd.service.api.PghdStagingService;
import net.breezeware.carejoy.pghd.service.bodytrace.BPData;
import net.breezeware.carejoy.pghd.service.bodytrace.BodyTraceParser;
import net.breezeware.carejoy.pghd.service.bodytrace.WeightData;
import net.breezeware.carejoy.pghd.service.fitibit.FitbitActivityReadingDto;
import net.breezeware.carejoy.pghd.service.fitibit.FitbitPghdParser;
import net.breezeware.carejoy.pghd.service.iglucose.BGData;
import net.breezeware.carejoy.pghd.service.iglucose.MeterValidate;
import net.breezeware.carejoy.pghd.service.iglucose.iGlucoseParser;
import net.breezeware.carejoy.pghd.service.ihealth.BGDataFeed;
import net.breezeware.carejoy.pghd.service.ihealth.BPDataFeed;
import net.breezeware.carejoy.pghd.service.ihealth.IHealthPghdParser;
import net.breezeware.carejoy.pghd.service.ihealth.WeightDataFeed;
import net.breezeware.carejoy.pghd.service.selfReportedData.SelfReportedBgData;
import net.breezeware.carejoy.pghd.service.selfReportedData.SelfReportedBpData;
import net.breezeware.carejoy.pghd.service.selfReportedData.SelfReportedDataParser;
import net.breezeware.carejoy.pghd.service.selfReportedData.SelfReportedWeightData;

@Service
@Slf4j
public class PghdProcessingServiceImpl implements PghdProcessingService {

    @Autowired
    PghdStagingService pghdStagingService;

    @Autowired
    FitbitPghdParser fitbitPghdParser;

    @Autowired
    IHealthPghdParser iHealthPghdParser;

    @Autowired
    BodyTraceParser bodyTraceParser;

    @Autowired
    iGlucoseParser iGlucoseParser;

    @Autowired
    SelfReportedDataParser selfReportedDataParser;

    @Autowired
    PatientPghdReadingRepository patientPghdReadingRepository;

    @Transactional
    public Optional<List<PatientPghdReading>> processPatientPghdFeedsAndPersist(UUID patientId) {
        log.info("Entering processPatientPghdFeeds()");

        // retrieve NEW patient PGHD feeds for a patient
        Optional<List<PatientPghdFeed>> patientFeeds = pghdStagingService.retrievePatientPghdFeeds(patientId,
                Arrays.asList(PatientPghdFeed.PatientFeedStatus.NEW.name()));

        // return value
        Optional<List<PatientPghdReading>> readings = Optional.of(new ArrayList<PatientPghdReading>());

        // proceed if PGHD feeds are available for processing
        if (patientFeeds != null && patientFeeds.isPresent()) {
            readings = processPatientPghdFeeds(patientFeeds.get());
            if (readings != null && readings.isPresent()) {
                // persist the readings
                patientPghdReadingRepository.saveAll(readings.get());
            }
        }
        // return readings
        log.info("Leaving processPatientPghdFeeds(). # of readings for patient = {}",
                readings.isPresent() ? readings.get().size() : "0");
        return readings;
    }

    @Transactional
    public Optional<List<PatientPghdReading>> processPatientPghdFeeds(List<PatientPghdFeed> patientFeeds) {
        log.info("Entering processPatientPghdFeeds()");

        // return value
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();

        // proceed if PGHD feeds are available for processing
        if (patientFeeds != null && !patientFeeds.isEmpty()) {
            for (PatientPghdFeed patientFeed : patientFeeds) {

                PghdFeed pghdFeed = patientFeed.getPghdFeed();

                // FITBIT
                if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.FITBIT.name())) {
                    readings.addAll(getFitbitPatientPghdReadings(pghdFeed, patientFeed));
                }
                // TODO: OMRON
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.OMRON.name())) {

                }
                // IHEALTH
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.IHEALTH.name())) {
                    readings.addAll(getIHealthPatientPghdReadings(pghdFeed, patientFeed));
                }
                // BODYTRACE
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.BODYTRACE.name())) {
                    readings.addAll(getBodyTracePatientPghdReadings(pghdFeed, patientFeed));
                }
                // IGLUCOSE
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.IGLUCOSE.name())) {
                    readings.addAll(getIGlucosePatientPghdReadings(pghdFeed, patientFeed));
                }
                // CAREJOYODM
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.CAREJOYODM.name())) {
                    readings.addAll(getCarejoyOdmPatientPghdReadings(pghdFeed, patientFeed));
                }
                // RH_MOBILE and RH_WEB (Self reported data source)
                else if (pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.RH_MOBILE.name())
                        || pghdFeed.getSource().equalsIgnoreCase(PghdFeed.PghdFeedSource.RH_WEB.name())) {
                    readings.addAll(getSelfReportedPatientPghdReadings(patientFeed));
                }
            }
        }

        // return readings
        log.info("Leaving processPatientPghdFeeds(). # of readings for patient = {}", readings.size());
        return Optional.of(readings);
    }

    private List<PatientPghdReading> getIGlucosePatientPghdReadings(PghdFeed pghdFeed, PatientPghdFeed patientFeed) {
        log.info("Entering getIGlucosePatientPghdReadings() for patient {}. PghdFeed Type {} ",
                patientFeed.getPatientId(), pghdFeed.getPghdType());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();
        BGData bgData = new BGData();
        try {
            bgData = iGlucoseParser.parseBloodGlucosePghdFeed(pghdFeed.getPghdJsonValue());
        } catch (JsonSyntaxException ex) {
            log.error("Error while parsing and building the ");
        }
        if (bgData != null) {
            readings.addAll(iGlucoseParser.buildPatientPghdReading(patientFeed.getPatientId(), bgData,
                    patientFeed.getPghdFeed().getSource()));
        }

        log.info("Leaving getIGlucosePatientPghdReadings(). # of readings = {}", readings.size());
        return readings;
    }

    private List<PatientPghdReading> getCarejoyOdmPatientPghdReadings(PghdFeed pghdFeed, PatientPghdFeed patientFeed) {
        log.info("Entering getCarejoyOdmPatientPghdReadings() for patient {}. PghdType = {}",
                patientFeed.getPatientId(), pghdFeed.getPghdType());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();
        CarejoyOdmPghdData carejoyOdmPghdData = new CarejoyOdmPghdData();
        try {
            carejoyOdmPghdData = new Gson().fromJson(pghdFeed.getPghdJsonValue(), CarejoyOdmPghdData.class);
        } catch (JsonSyntaxException ex) {
            log.error("Error while parsing the json response from carejoyOdm. {}", ex.getMessage());
        }
        if (carejoyOdmPghdData != null) {
            PatientPghdReading reading = new PatientPghdReading();
            reading.setCreatedDate(Instant.now());
            reading.setPatientId(patientFeed.getPatientId());
            reading.setPghdSource(PghdFeed.PghdFeedSource.CAREJOYODM.name());
            reading.setReadingDate(carejoyOdmPghdData.getReadingTime());

            reading.setPghdType(carejoyOdmPghdData.getPghdType());
            reading.setUnit(carejoyOdmPghdData.getPghdUnit());
            reading.setValue(carejoyOdmPghdData.getPghdValue());
            readings.add(reading);
        }
        log.info("Leaving getCarejoyOdmPatientPghdReadings()");
        return readings;
    }

    private List<PatientPghdReading> getIHealthPatientPghdReadings(PghdFeed pghdFeed, PatientPghdFeed patientFeed) {
        log.info("Entering getIHealthPatientPghdReadings() for patient {}. Reading type is {}",
                patientFeed.getPatientId(), pghdFeed.getPghdType());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();
        try {
            if (pghdFeed.getPghdType().equals(PghdFeed.PghdType.BG.name())) {
                BGDataFeed bgDataFeed = iHealthPghdParser.parseBloodGlucosePghdFeed(pghdFeed);
                readings.addAll(iHealthPghdParser.buildPatientPghdReading(patientFeed.getPatientId(), bgDataFeed,
                        patientFeed.getPghdFeed().getSource()));
            } else if (pghdFeed.getPghdType().equals(PghdFeed.PghdType.BP.name())) {
                BPDataFeed bpDataFeed = iHealthPghdParser.parseBloodPressurePghdFeed(pghdFeed);
                readings.addAll(iHealthPghdParser.buildPatientPghdReading(patientFeed.getPatientId(), bpDataFeed,
                        patientFeed.getPghdFeed().getSource()));
            } else if (pghdFeed.getPghdType().equals(PghdFeed.PghdType.WEIGHT.name())) {
                WeightDataFeed weightDataFeed = iHealthPghdParser.parseWeightPghdFeed(pghdFeed);
                readings.addAll(iHealthPghdParser.buildPatientPghdReading(patientFeed.getPatientId(), weightDataFeed,
                        patientFeed.getPghdFeed().getSource()));
            }
        } catch (JsonSyntaxException ex) {
            log.error("Error while parsing the PghdFeed for patient: {}. PghdType = {}. Error: {}",
                    patientFeed.getPatientId(), pghdFeed.getPghdType(), ex.getMessage());
        }
        log.info("Leaving getIHealthPatientPghdReadings(). # of readings for patient {} are {}",
                patientFeed.getPatientId(), readings.size());
        return readings;
    }

    private List<PatientPghdReading> getSelfReportedPatientPghdReadings(PatientPghdFeed patientFeed) {
        log.info("Entering getSelfReportedPatientPghdReadings() for patient {}. PghdType = {}",
                patientFeed.getPatientId(), patientFeed.getPghdFeed().getPghdType());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();
        try {
            if (patientFeed.getPghdFeed().getPghdType().equalsIgnoreCase(PghdFeed.PghdType.BP.name())) {

                SelfReportedBpData selfReportedBpData = selfReportedDataParser
                        .parseSelfReportedBpPghdFeed(patientFeed.getPghdFeed());
                readings.addAll(selfReportedDataParser.buildPatientPghdReadingFromSelfReportedData(
                        patientFeed.getPatientId(), selfReportedBpData, patientFeed.getPghdFeed().getSource()));

            } else if (patientFeed.getPghdFeed().getPghdType().equalsIgnoreCase(PghdFeed.PghdType.WEIGHT.name())) {

                SelfReportedWeightData selfReportedWeightData = selfReportedDataParser
                        .parseSelfReportedWeightPghdFeed(patientFeed.getPghdFeed());
                readings.add(selfReportedDataParser.buildPatientPghdReadingFromSelfReportedData(
                        patientFeed.getPatientId(), selfReportedWeightData, patientFeed.getPghdFeed().getSource()));

            } else if (patientFeed.getPghdFeed().getPghdType().equalsIgnoreCase(PghdFeed.PghdType.BG.name())) {

                SelfReportedBgData selfReportedBgData = selfReportedDataParser
                        .parseSelfReportedBgPghdFeed(patientFeed.getPghdFeed());
                readings.addAll(selfReportedDataParser.buildPatientPghdReadingFromSelfReportedData(
                        patientFeed.getPatientId(), selfReportedBgData, patientFeed.getPghdFeed().getSource()));

            }

        } catch (JsonSyntaxException ex) {
            log.error("Error while parsing the PghdFeed for patient: {}. PghdType = {}. Error: {}",
                    patientFeed.getPatientId(), patientFeed.getPghdFeed().getPghdType(), ex.getMessage());
        }
        log.info("Leaving getSelfReportedPatientPghdReadings() for patient {}. # of readings = {}",
                patientFeed.getPatientId(), readings.size());
        return readings;
    }

    private List<PatientPghdReading> getBodyTracePatientPghdReadings(PghdFeed pghdFeed, PatientPghdFeed patientFeed) {
        log.info("Entering getBodyTracePatientPghdReadings() for patient {}. PghdType = {}", patientFeed.getPatientId(),
                pghdFeed.getPghdType());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();
        try {
            if (pghdFeed.getPghdType().equalsIgnoreCase(PghdFeed.PghdType.BP.name())) {
                BPData bpData = bodyTraceParser.parseBloodPressurePghdFeed(pghdFeed);
                readings.addAll(bodyTraceParser.buildPatientPghdReading(patientFeed.getPatientId(), bpData,
                        patientFeed.getPghdFeed().getSource()));
            } else if (pghdFeed.getPghdType().equalsIgnoreCase(PghdFeed.PghdType.WEIGHT.name())) {
                WeightData weightData = bodyTraceParser.parseWeightPghdFeed(pghdFeed);
                readings.add(bodyTraceParser.buildPatientPghdReading(patientFeed.getPatientId(), weightData,
                        patientFeed.getPghdFeed().getSource()));

            }
        } catch (JsonSyntaxException ex) {
            log.error("Error while parsing the PghdFeed for patient: {}. PghdType = {}. Error: {}",
                    patientFeed.getPatientId(), pghdFeed.getPghdType(), ex.getMessage());
        }
        log.info("Leaving getBodyTracePatientPghdReadings() for patient {}. # of readings = {}",
                patientFeed.getPatientId(), readings.size());
        return readings;
    }

    private List<PatientPghdReading> getFitbitPatientPghdReadings(PghdFeed pghdFeed, PatientPghdFeed patientFeed) {
        log.info("Entering getFitbitPatientPghdReadings() for patient: {}", patientFeed.getPatientId());
        List<PatientPghdReading> readings = new ArrayList<PatientPghdReading>();

        // NOTE: Using Fitbit Activity Specific DTO here, it could be made a generic one
        // at a later time based on other feeds and their content.
        List<FitbitActivityReadingDto> fitbitActivityReadingDtoList = fitbitPghdParser.parsePghdFeed(pghdFeed);

        PatientPghdReading lastReading = patientPghdReadingRepository
                .findFirstByPatientIdAndPghdSourceAndPghdTypeOrderByReadingDateDesc(patientFeed.getPatientId(),
                        patientFeed.getPghdFeed().getSource(), patientFeed.getPghdFeed().getPghdType());

        List<PatientPghdReading> parsedDataList = fitbitPghdParser.buildPatientPghdReading(patientFeed.getPatientId(),
                fitbitActivityReadingDtoList, patientFeed.getPghdFeed().getPghdType(),
                patientFeed.getPghdFeed().getSource());

        if (parsedDataList != null && parsedDataList.size() > 0) {
            // sort the list in descending order
            parsedDataList.sort((r1, r2) -> r2.getReadingDate().compareTo(r1.getReadingDate()));

            // this makes sure that all the elements after first non-zero values will be
            // added into the readings table. Since the remove() will not work in this
            // scenario due to id=0 for all the objects of list, we had to use this approach
            for (PatientPghdReading reading : parsedDataList) {
                if (Integer.valueOf(reading.getValue()) > 0) {
                    readings.add(reading);
                } else {
                    if (readings.size() > 0) {
                        // this is to make sure that last available reading in DB is updated and not
                        // duplicated
                        if (lastReading != null && reading.getReadingDate().equals(lastReading.getReadingDate())) {
                            reading.setId(lastReading.getId());
                        }
                        readings.add(reading);
                    }
                }
            }
        } else {
            log.error("Error in building PatientPghdReading. # of readings {}", readings.size());
        }

        log.info("Leaving getFitbitPatientPghdReadings() for patient: {}. # of readings {}", patientFeed.getPatientId(),
                readings.size());
        return readings;
    }

    @Transactional
    public BGData parseiGlucoseData(String payload) {
        log.info("Entering parseiGlucoseData()");
        log.info("Leaving parseiGlucoseData()");
        return iGlucoseParser.parseBloodGlucosePghdFeed(payload);
    }

    @Transactional
    public boolean parseAndValidateiGlucoseMeterValidate(String payload) {
        log.info(
                "Entering parseAndValidateiGlucoseMeterValidate(). Json response from iGlucose to validate device is: {}",
                payload);
        MeterValidate meterValidate = iGlucoseParser.parseMeterValidatePghdFeed(payload);
        if (meterValidate.getStatus().getStatus_code() == HttpStatus.SC_OK) {
            log.info("Leaving parseAndValidateiGlucoseMeterValidate(). Meter validation status is: {}",
                    meterValidate.getStatus().getStatus_message());
            return meterValidate.is_valid();
        } else {
            log.error("Error while parsing the response from iGlucose");
            return false;
        }

    }
}