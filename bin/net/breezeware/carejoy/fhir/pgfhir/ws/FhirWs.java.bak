package net.breezeware.carejoy.fhir.pgfhir.ws;

import io.swagger.annotations.ApiOperation;


import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import net.breezeware.carejoy.fhir.exception.FhirException;
import net.breezeware.carejoy.fhir.pgfhir.entity.FhirResource;
import net.breezeware.carejoy.fhir.pgfhir.service.api.FhirService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import ca.uhn.fhir.parser.DataFormatException;

/**
 * 
 * @author karthikcm_cse
 * 
 */
@Component
@Path("api/fhir")
public class FhirWs {

    Logger logger = LoggerFactory.getLogger(FhirWs.class);

    @Autowired
    FhirService fhirService;

    /**
     * Creates an FHIR resource.
     * 
     * @param resourceType
     * @param json
     * @return
     */
    @POST
    @Path("resources/{resourceType}")
    @Produces(MediaType.APPLICATION_JSON)
    @Consumes(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Creates a new FHIR resource")
    public String createResource(@PathParam("resourceType") String resourceType, String json) {
        logger.info("Resource JSON = " + json);

        try {
            FhirResource resource = fhirService.createResourceFromJson(resourceType, json);
            return resource.getResourceContent().getValue();
        } catch (DataFormatException ex) {
            throw ex;
        } catch (FhirException e) {
            return Response
                    .status(Status.BAD_REQUEST)
                    .entity("Error: HTTP 400 Bad Request: Can not create resource with ID, an ID element must"
                            + " not be supplied in the resource body on a create POST operation").build().toString();
        }
    }

    /**
     * Returns a single instance with the content specified for the FHIR
     * resource ID and type
     * 
     * @param resourceType
     * @param resourceId
     * @return
     */
    @GET
    @Path("resources/{resourceType}/{resourceId}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Retrieves an FHIR resource by ID")
    public String readResource(@PathParam("resourceType") String resourceType, @PathParam("resourceId") long resourceId) {
        logger.info("Resource type, ID = " + resourceType + ", " + resourceId);
        FhirResource resource = fhirService.getResource(resourceType, resourceId);

        return resource.getResourceContent().getValue();
    }
}