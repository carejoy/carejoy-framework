package net.breezeware.carejoy.careplanmanagement.service.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;

import javax.transaction.Transactional;

import org.hl7.fhir.r4.model.CarePlan;
import org.hl7.fhir.r4.model.CarePlan.CarePlanActivityComponent;
import org.hl7.fhir.r4.model.CarePlan.CarePlanStatus;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Condition;
import org.hl7.fhir.r4.model.Enumerations.PublicationStatus;
import org.hl7.fhir.r4.model.Goal;
import org.hl7.fhir.r4.model.Goal.GoalTargetComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionActionComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionActionConditionComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionActionParticipantComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionActionRelatedActionComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionGoalComponent;
import org.hl7.fhir.r4.model.PlanDefinition.PlanDefinitionGoalTargetComponent;
import org.hl7.fhir.r4.model.Reference;
import org.hl7.fhir.r4.model.RequestGroup;
import org.hl7.fhir.r4.model.RequestGroup.ActionCardinalityBehavior;
import org.hl7.fhir.r4.model.RequestGroup.ActionConditionKind;
import org.hl7.fhir.r4.model.RequestGroup.ActionGroupingBehavior;
import org.hl7.fhir.r4.model.RequestGroup.ActionPrecheckBehavior;
import org.hl7.fhir.r4.model.RequestGroup.ActionRelationshipType;
import org.hl7.fhir.r4.model.RequestGroup.ActionRequiredBehavior;
import org.hl7.fhir.r4.model.RequestGroup.ActionSelectionBehavior;
import org.hl7.fhir.r4.model.RequestGroup.RequestGroupActionComponent;
import org.hl7.fhir.r4.model.RequestGroup.RequestGroupActionConditionComponent;
import org.hl7.fhir.r4.model.RequestGroup.RequestGroupActionRelatedActionComponent;
import org.hl7.fhir.r4.model.RequestGroup.RequestPriority;
import org.hl7.fhir.r4.model.UriType;
import org.json.JSONException;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.parser.IParser;
import net.breezeware.carejoy.careplanmanagement.dao.ResourceRepository;
import net.breezeware.carejoy.careplanmanagement.entity.PlanDefinition;
import net.breezeware.carejoy.careplanmanagement.entity.Resource;
import net.breezeware.carejoy.careplanmanagement.service.api.CarePlanService;
import net.breezeware.carejoy.careplanmanagement.service.api.FhirResourceService;
import net.breezeware.carejoy.careplanmanagement.service.api.PlanDefinitionService;
import net.breezeware.carejoy.domain.graph.entity.Patient;
import net.breezeware.carejoy.domain.graph.service.api.DomainGraphService;
import net.breezeware.dynamo.audit.aspectj.Auditable;

@Service
public class CarePlanServiceImpl implements CarePlanService {

    Logger logger = LoggerFactory.getLogger(CarePlanServiceImpl.class);

    @Autowired
    PlanDefinitionService planDefinitionService;

    @Autowired
    DomainGraphService domainGraphService;

    @Autowired
    FhirResourceService fhirResourceService;

    @Autowired
    ResourceRepository resourceRepository;

    IParser fhirJsonParser = null;

    @Transactional
    @Auditable(event = "Create Careplan for Patient", argNames = "planDefinitionId, patientUuid")
    public void createCarePlan(long planDefinitionId, String patientUuid) {
        logger.info("Entering createCarePlan()");

        // TODO:
        // 1. retrieve PlanDefinition by PlanDefinition ID
        PlanDefinition planDefinition = planDefinitionService.retrievePlanDefinitionById(planDefinitionId);
        logger.info("Plan Definition = {}", planDefinition.getJsonResource());
        // 2. retrieve Patient resources for patient identified by UUID
        Patient patient = domainGraphService.getPatientByUuid(UUID.fromString(patientUuid));
        logger.info("Patient Name = {}", patient.getPerson().getName().toString());
        // 3. implement algorithm to generate CarePlan and related resources in FHIR
        // JSON format
        // from PlanDefinition using HAPI FHIR library
        if (planDefinition != null && patient != null) {
            generateCarePlan(planDefinition, patient);
        }
        // 4. store generated CarePlan and related resources in Postgres DB in FHIR JSON
        // format
        // 5. generate Graph DB entities from CarePlan and related resources
        // 6. store Graph DB entities in Neo4J DB.

        logger.info("Leaving createCarePlan()");
    }

    private void generateCarePlan(PlanDefinition planDefinition, Patient patient) {
        if (planDefinition.getJsonResource() != null) {
            FhirContext ctx = FhirContext.forR4();
            org.hl7.fhir.r4.model.PlanDefinition fhirPlanDefinition = new org.hl7.fhir.r4.model.PlanDefinition();
            fhirPlanDefinition = ctx.newJsonParser().parseResource(org.hl7.fhir.r4.model.PlanDefinition.class,
                    planDefinition.getJsonResource().toString());

            // Applying the Plan Definition(Generate CarePlan)

            // Reference = https://www.hl7.org/fhir/plandefinition.html#12.18.3.3

            // @formatter:off
			/**
			 * Step 1 : Create a CarePlan resource focused on the Patient in context and
			 * linked to the PlanDefinition using the instantiates element
			 */
			// @formatter:on
            CarePlan careplan = new CarePlan(); // linking to patient will be seen later

            // TODO: CMK - CP identifier (business ID assigned by system that generates CP)

            List<UriType> uriList = new ArrayList<UriType>();
            if (fhirPlanDefinition.getUrl() != null) {
                UriType planDefinitionURI = new UriType();
                planDefinitionURI.setValue(fhirPlanDefinition.getUrl());
                uriList.add(planDefinitionURI);
                careplan.setInstantiatesUri(uriList);
            }

            if (fhirPlanDefinition.getStatus() != null) {
                careplan.setStatus(convertToCarePlanStatus(fhirPlanDefinition.getStatus()));
            }

            // TODO: CMK - CP status

            // TODO: CMK - CP intent

            // TODO: CMK - CP category

            if (fhirPlanDefinition.getTitle() != null) {
                careplan.setTitle(fhirPlanDefinition.getTitle());
            }

            if (fhirPlanDefinition.getDescription() != null) {
                careplan.setDescription(fhirPlanDefinition.getDescription());
            }

            Reference subject = new Reference();
            if (patient.getUuid() != null) {
                subject.setReference(patient.getUuid().toString());
                careplan.setSubject(subject);
            }

            // TODO: CMK - CP period

            // TODO: CMK - CP created

            // TODO: CMK - CP author

            // TODO: CMK - CP addresses

            // @formatter:off
			/**
			 * Step 2 : Create goal elements in the CarePlan based on the goal definitions
			 * in the plan
			 */
			// @formatter:on
            if (fhirPlanDefinition.getGoal() != null) {
                List<Reference> goalReferenceList = new ArrayList<Reference>();
                // List<Goal> goalList = new ArrayList<Goal>();
                for (PlanDefinitionGoalComponent goalComponent : fhirPlanDefinition.getGoal()) {
                    if (goalComponent != null) {
                        Goal goal = new Goal();

                        // TODO: CMK - goal component MAY NOT contain an ID. For example: In ACT PD,
                        // Goal does not have an ID.
                        // This results in a empty goalReference. The result is a CP without a Goal when
                        // it is rendered.

                        Reference goalReference = new Reference();
                        if (goalComponent.getId() != null) {
                            goalReference.setReference(goalComponent.getId());
                            goal.setId(goalComponent.getId());
                        } else {
                            String goalId = UUID.randomUUID().toString();
                            goalReference.setReference(goalId);
                            goal.setId(goalId);
                        }

                        if (goalComponent.getCategory() != null) {
                            List<CodeableConcept> categoryList = new ArrayList<CodeableConcept>();
                            categoryList.add(goalComponent.getCategory());
                            goal.setCategory(categoryList);
                        }

                        if (goalComponent.getDescription() != null) {
                            goal.setDescription(goalComponent.getDescription());
                        }

                        if (goalComponent.getPriority() != null) {
                            goal.setPriority(goalComponent.getPriority());
                        }

                        if (goalComponent.getStart() != null) {
                            goal.setStart(goalComponent.getStart());
                        }

                        if (goalComponent.getAddresses() != null) {
                            // List<CodeableConcept> addressesList = new ArrayList<CodeableConcept>();
                            List<Reference> addressesReference = new ArrayList<Reference>();
                            for (CodeableConcept addresses : goalComponent.getAddresses()) {
                                if (addresses != null) {
                                    // addressesList.add(addresses);
                                    Reference reference = new Reference();
                                    if (addresses.getId() != null) {
                                        reference.setReference(addresses.getId());
                                    } else {
                                        String addressesId = UUID.randomUUID().toString();
                                        addresses.setId(addressesId);
                                        reference.setReference(addressesId);
                                    }
                                    addressesReference.add(reference);
                                    // save Addresses in DB
                                    Condition condition = new Condition();
                                    condition.setCode(addresses);
                                    String addressesJson = getJsonParser().encodeResourceToString(condition);
                                    saveResourceInDB(addressesJson, "Carejoy - CP Generator", "Condition");
                                }
                            }
                            goal.setAddresses(addressesReference);
                        }

                        // documentation cannot be set to CarePlan because no method gets argument of
                        // type RelatedArtifact
                        // TODO : Documentation

                        if (goalComponent.getTarget() != null) {
                            List<GoalTargetComponent> goalTargetList = new ArrayList<GoalTargetComponent>();
                            for (PlanDefinitionGoalTargetComponent target : goalComponent.getTarget()) {
                                if (target != null) {
                                    GoalTargetComponent goalTarget = new GoalTargetComponent();
                                    goalTarget.setMeasure(target.getMeasure());
                                    goalTarget.setDetail(target.getDetail());
                                    goalTarget.setDue(target.getDue());
                                    goalTargetList.add(goalTarget);
                                }
                            }
                            goal.setTarget(goalTargetList);
                        }

                        goalReferenceList.add(goalReference);
                        // goalList.add(goal);

                        // save Goal in DB
                        String goalJson = getJsonParser().encodeResourceToString(goal);
                        logger.info("Careplan Goal ==> " + goalJson);
                        saveResourceInDB(goalJson, "Carejoy - CP Generator", "Goal");
                    }
                }
                careplan.setGoal(goalReferenceList);

                logger.info("# of goal references in CP = {}", careplan.getGoal().size());

                logger.info("Careplan (as GSON string) ==> " + new Gson().toJson(careplan));

                String carePlanJson = getJsonParser().encodeResourceToString(careplan);
                logger.info("Careplan (after goal setting) ==> " + carePlanJson);
            }

            // @formatter:off
			/**
			 * Step 3 : Create a RequestGroup resource focused on the Patient in context and
			 * linked to the PlanDefinition using the instantiatesCanonical element
			 */
			// @formatter:on
            RequestGroup requestGroup = new RequestGroup();
            String requestGroupId = UUID.randomUUID().toString();
            requestGroup.setId(requestGroupId);
            requestGroup.setSubject(subject); // linking to patient
            requestGroup.setInstantiatesUri(uriList); // linking to plan definition using instantiatesUri instead of
                                                      // instantiatesCanonical
            Reference requestGroupReference = new Reference();
            requestGroupReference.setReference(requestGroupId);

            // @formatter:off
			/**
			 * Step 4 & Step 5 : Create an activity in the CarePlan to reference the
			 * RequestGroup & Process each action element of the PlanDefinition
			 */
			// @formatter:on
            List<CarePlanActivityComponent> activityList = new ArrayList<CarePlanActivityComponent>();
            CarePlanActivityComponent carePlanActivity = new CarePlanActivityComponent();
            carePlanActivity.setReference(requestGroupReference);
            List<RequestGroupActionComponent> requestGroupActionList = new ArrayList<RequestGroupActionComponent>();
            if (fhirPlanDefinition.getAction() != null) {
                for (PlanDefinitionActionComponent planDefinitionAction : fhirPlanDefinition.getAction()) {
                    if (planDefinitionAction != null) {
                        // group action
                        if (planDefinitionAction.getAction() != null && planDefinitionAction.getAction().size() > 1) {
                            RequestGroupActionComponent requestGroupAction = convertPlanDefinitionActionToRequestGroupAction(
                                    planDefinitionAction);
                            requestGroupActionList.add(requestGroupAction);

                            for (PlanDefinitionActionComponent subAction : planDefinitionAction.getAction()) {
                                if (subAction != null) {
                                    RequestGroupActionComponent subActivity = convertPlanDefinitionActionToRequestGroupAction(
                                            subAction);
                                    requestGroupActionList.add(subActivity);
                                }
                            }
                        } else if (planDefinitionAction.getAction() != null
                                && planDefinitionAction.getAction().size() == 1) { // single and atomic action
                            RequestGroupActionComponent requestGroupAction = convertPlanDefinitionActionToRequestGroupAction(
                                    planDefinitionAction);
                            requestGroupActionList.add(requestGroupAction);
                        }
                    }
                }
            }
            requestGroup.setAction(requestGroupActionList);
            // save Request Group in DB
            String requestGroupJson = getJsonParser().encodeResourceToString(requestGroup);
            saveResourceInDB(requestGroupJson, "Carejoy - CP Generator", "Request Group");

            activityList.add(carePlanActivity);
            careplan.setActivity(activityList);

            // save CarePlan in DB
            String carePlanJson = getJsonParser().encodeResourceToString(careplan);
            logger.info("Careplan (final) ==> " + carePlanJson);
            saveResourceInDB(carePlanJson, "Carejoy - CP Generator", "CarePlan");
        }
    }

    private void saveResourceInDB(String jsonString, String publisher, String resourceType) {
        Resource resource = new Resource();
        try {
            logger.info("1. Creating JSON resource as JSONObject");
            resource.setJsonResource(new JSONObject(jsonString));
            logger.info("2. Created JSON resource as JSONObject");
        } catch (JSONException e) {
            e.printStackTrace();
            logger.info("Exception occured while creating JSONObject from string");
        }
        resource.setCreatedDate(Calendar.getInstance());
        resource.setModifiedDate(Calendar.getInstance());
        resource.setPublisher(publisher);
        resource.setResourceId(UUID.randomUUID().toString());
        // cpResource.setResourceIdentifier(careplan.getIdentifier().get(0).getId());
        resource.setResourceType(resourceType);
        resource.setStatus("active");

        logger.info("Calling saveResource()");

        resource = fhirResourceService.saveResource(resource);
        logger.info("Called saveResource()");

        logger.info("Resourced saved in DB = {}", resource);
    }

    private IParser getJsonParser() {
        if (fhirJsonParser == null) {
            fhirJsonParser = FhirContext.forR4().newJsonParser();
            return fhirJsonParser;
        } else {
            return fhirJsonParser;
        }
    }

    private CarePlanStatus convertToCarePlanStatus(PublicationStatus planStatus) {
        CarePlanStatus carePlanStatus = CarePlanStatus.fromCode(planStatus.toCode());
        return carePlanStatus;
    }

    private RequestPriority convertToRequestGroupPriority(
            org.hl7.fhir.r4.model.PlanDefinition.RequestPriority planDefinitionPriority) {
        RequestPriority requestPriority = RequestPriority.fromCode(planDefinitionPriority.toCode());
        return requestPriority;
    }

    private List<RequestGroupActionConditionComponent> convertToRequestGroupCondition(
            List<PlanDefinitionActionConditionComponent> planDefintionConditionList) {
        List<RequestGroupActionConditionComponent> requestGroupConditionList = new ArrayList<RequestGroupActionConditionComponent>();
        for (PlanDefinitionActionConditionComponent planDefintionCondition : planDefintionConditionList) {
            if (planDefintionCondition != null) {
                RequestGroupActionConditionComponent requestGroupCondition = new RequestGroupActionConditionComponent();
                if (planDefintionCondition.getKind() != null) {
                    requestGroupCondition.setKind(convertToRequestGroupConditionKind(planDefintionCondition.getKind()));
                }
                if (planDefintionCondition.getExpression() != null) {
                    requestGroupCondition.setExpression(planDefintionCondition.getExpression());
                }
                requestGroupConditionList.add(requestGroupCondition);
            }
        }
        return requestGroupConditionList;
    }

    private List<RequestGroupActionRelatedActionComponent> convertToRequestGroupRelatedAction(
            List<PlanDefinitionActionRelatedActionComponent> planDefintionRelatedActionList) {
        List<RequestGroupActionRelatedActionComponent> requestGroupRelatedActionList = new ArrayList<RequestGroupActionRelatedActionComponent>();
        for (PlanDefinitionActionRelatedActionComponent planDefintionRelatedAction : planDefintionRelatedActionList) {
            if (planDefintionRelatedAction != null) {
                RequestGroupActionRelatedActionComponent requestGroupRelatedAction = new RequestGroupActionRelatedActionComponent();
                if (planDefintionRelatedAction.getActionId() != null) {
                    requestGroupRelatedAction.setActionId(planDefintionRelatedAction.getActionId());
                }

                if (planDefintionRelatedAction.getRelationship() != null) {
                    requestGroupRelatedAction.setRelationship(convertToRequestGroupRelatedActionRelationship(
                            planDefintionRelatedAction.getRelationship()));
                }

                if (planDefintionRelatedAction.getOffset() != null) {
                    requestGroupRelatedAction.setOffset(planDefintionRelatedAction.getOffset());
                }
                requestGroupRelatedActionList.add(requestGroupRelatedAction);
            }
        }
        return requestGroupRelatedActionList;
    }

    private ActionRelationshipType convertToRequestGroupRelatedActionRelationship(
            org.hl7.fhir.r4.model.PlanDefinition.ActionRelationshipType actionRelationship) {
        ActionRelationshipType requestGroupRelationship = ActionRelationshipType.fromCode(actionRelationship.toCode());
        return requestGroupRelationship;
    }

    private ActionConditionKind convertToRequestGroupConditionKind(
            org.hl7.fhir.r4.model.PlanDefinition.ActionConditionKind planDefinitionConditionKind) {
        ActionConditionKind requestGroupConditionKind = ActionConditionKind
                .fromCode(planDefinitionConditionKind.toCode());
        return requestGroupConditionKind;
    }

    private RequestGroupActionComponent convertPlanDefinitionActionToRequestGroupAction(
            PlanDefinitionActionComponent planDefinitionAction) {
        RequestGroupActionComponent requestGroupAction = new RequestGroupActionComponent();

        if (planDefinitionAction.getId() != null) {
            requestGroupAction.setId(planDefinitionAction.getId());
        }

        if (planDefinitionAction.getTitle() != null) {
            requestGroupAction.setTitle(planDefinitionAction.getTitle());
        }

        if (planDefinitionAction.getDescription() != null) {
            requestGroupAction.setDescription(planDefinitionAction.getDescription());
        }

        if (planDefinitionAction.getTextEquivalent() != null) {
            requestGroupAction.setTextEquivalent(planDefinitionAction.getTextEquivalent());
        }

        if (planDefinitionAction.getTiming() != null) {
            requestGroupAction.setTiming(planDefinitionAction.getTiming());
        }

        if (planDefinitionAction.getPrefix() != null) {
            requestGroupAction.setPrefix(planDefinitionAction.getPrefix());
        }

        if (planDefinitionAction.getPriority() != null) {
            requestGroupAction.setPriority(convertToRequestGroupPriority(planDefinitionAction.getPriority()));
        }

        if (planDefinitionAction.getCode() != null) {
            requestGroupAction.setCode(planDefinitionAction.getCode());
        }

        if (planDefinitionAction.getDocumentation() != null) {
            requestGroupAction.setDocumentation(planDefinitionAction.getDocumentation());
        }

        if (planDefinitionAction.getCondition() != null) {
            requestGroupAction.setCondition(convertToRequestGroupCondition(planDefinitionAction.getCondition()));
        }

        if (planDefinitionAction.getRelatedAction() != null) {
            requestGroupAction
                    .setRelatedAction(convertToRequestGroupRelatedAction(planDefinitionAction.getRelatedAction()));
        }

        List<PlanDefinitionActionParticipantComponent> planDefinitionParticipantList = new ArrayList<PlanDefinitionActionParticipantComponent>();
        if (planDefinitionAction.getParticipant() != null) {
            planDefinitionParticipantList.addAll(planDefinitionAction.getParticipant());
            List<Reference> participantReferenceList = new ArrayList<Reference>();
            for (PlanDefinitionActionParticipantComponent participant : planDefinitionAction.getParticipant()) {
                Reference participantReference = new Reference();
                if (participant.getId() != null) {
                    participantReference.setReference(participant.getId());
                }
                participantReferenceList.add(participantReference);
            }
            requestGroupAction.setParticipant(participantReferenceList);
        }

        if (planDefinitionAction.getType() != null) {
            requestGroupAction.setType(planDefinitionAction.getType());
        }

        if (planDefinitionAction.getGroupingBehavior() != null) {
            requestGroupAction
                    .setGroupingBehavior(convertToRequestGroupingBehavior(planDefinitionAction.getGroupingBehavior()));
        }

        if (planDefinitionAction.getSelectionBehavior() != null) {
            requestGroupAction.setSelectionBehavior(
                    convertToReqeustGroupSelectionBehavior(planDefinitionAction.getSelectionBehavior()));
        }

        if (planDefinitionAction.getRequiredBehavior() != null) {
            requestGroupAction.setRequiredBehavior(
                    convertToRequestGroupRequiredBehavior(planDefinitionAction.getRequiredBehavior()));
        }

        if (planDefinitionAction.getPrecheckBehavior() != null) {
            requestGroupAction.setPrecheckBehavior(
                    convertToReqeustGroupPrecheckBehavior(planDefinitionAction.getPrecheckBehavior()));
        }

        if (planDefinitionAction.getCardinalityBehavior() != null) {
            requestGroupAction.setCardinalityBehavior(
                    convertToRequestGroupCardinalityBehavior(planDefinitionAction.getCardinalityBehavior()));
        }

        // TODO: CMK - planDefinitionAction.getDefinition()

        return requestGroupAction;
    }

    private ActionCardinalityBehavior convertToRequestGroupCardinalityBehavior(
            org.hl7.fhir.r4.model.PlanDefinition.ActionCardinalityBehavior cardinalityBehavior) {
        ActionCardinalityBehavior requestGroupCardinalityBehavior = ActionCardinalityBehavior
                .fromCode(cardinalityBehavior.toCode());
        return requestGroupCardinalityBehavior;
    }

    private ActionPrecheckBehavior convertToReqeustGroupPrecheckBehavior(
            org.hl7.fhir.r4.model.PlanDefinition.ActionPrecheckBehavior precheckBehavior) {
        ActionPrecheckBehavior requestGroupPrecheckBehavior = ActionPrecheckBehavior
                .fromCode(precheckBehavior.toCode());
        return requestGroupPrecheckBehavior;
    }

    private ActionRequiredBehavior convertToRequestGroupRequiredBehavior(
            org.hl7.fhir.r4.model.PlanDefinition.ActionRequiredBehavior requiredBehavior) {
        ActionRequiredBehavior requestGroupRequiredBehavior = ActionRequiredBehavior
                .fromCode(requiredBehavior.toCode());
        return requestGroupRequiredBehavior;
    }

    private ActionGroupingBehavior convertToRequestGroupingBehavior(
            org.hl7.fhir.r4.model.PlanDefinition.ActionGroupingBehavior groupingBehavior) {
        ActionGroupingBehavior requestGroupingBehavior = ActionGroupingBehavior.fromCode(groupingBehavior.toCode());
        return requestGroupingBehavior;
    }

    private ActionSelectionBehavior convertToReqeustGroupSelectionBehavior(
            org.hl7.fhir.r4.model.PlanDefinition.ActionSelectionBehavior selectionBehavior) {
        ActionSelectionBehavior requestGroupSelectionBehavior = ActionSelectionBehavior
                .fromCode(selectionBehavior.toCode());
        return requestGroupSelectionBehavior;
    }

}