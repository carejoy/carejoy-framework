package net.breezeware.carejoy.careplanmanagement.service.impl;

import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import net.breezeware.carejoy.careplanmanagement.dao.PatientPlanDefinitionRepository;
import net.breezeware.carejoy.careplanmanagement.dao.PlanDefinitionRepository;
import net.breezeware.carejoy.careplanmanagement.dto.PatientPlanDefinitionDto;
import net.breezeware.carejoy.careplanmanagement.entity.PatientPlanDefinition;
import net.breezeware.carejoy.careplanmanagement.entity.PlanDefinition;
import net.breezeware.carejoy.careplanmanagement.service.api.PlanDefinitionService;
import net.breezeware.dynamo.audit.aspectj.Auditable;

@Service
public class PlanDefinitionServiceImpl implements PlanDefinitionService {

	Logger logger = LoggerFactory.getLogger(PlanDefinitionServiceImpl.class);

	@Autowired
	PlanDefinitionRepository planDefinitionRepository;

	@Autowired
	PatientPlanDefinitionRepository patientPlanDefinitionRepository;

	@Transactional
	@Auditable(event = "Retrieve All Plan Definitions", argNames = "")
	public List<PlanDefinition> retrievePlanDefinitions() {
		logger.info("Entering retrievePlanDefinitions()");

		List<PlanDefinition> definitions = planDefinitionRepository.findAll();

		logger.info("Leaving retrievePlanDefinitions()");
		return definitions;
	}

	@Transactional
	@Auditable(event = "Retrieve Plan Definition", argNames = "planDefinitionId")
	public PlanDefinition retrievePlanDefinitionById(long id) {
		logger.info("Entering retrievePlanDefinitionsForOrganization(). Id = {}", id);

		PlanDefinition definition = planDefinitionRepository.getOne(id);

		logger.info("Leaving retrievePlanDefinitionsForOrganization(). Definition name = {}", definition.getName());
		return definition;
	}

//	@Transactional
//	@Auditable(event = "Save Plan Definition", argNames = "planDefinition")
//	public PlanDefinition savePlanDefinition(PlanDefinition planDefinition) {
//		logger.info("Entering savePlanDefinition()");
//
//		planDefinition = planDefinitionRepository.save(planDefinition);
//
//		logger.info("Leaving savePlanDefinition()");
//		return planDefinition;
//	}

	@Transactional
	@Auditable(event = "Assign Plan Definition to Patient", argNames = "planDefinitionId, patientUuid")
	public PatientPlanDefinition assignPlanDefinitionToPatient(long planDefinitionId, String patientUuid) {
		logger.info("Entering assignPlanDefinitionToPatient()");

		PlanDefinition planDefinition = planDefinitionRepository.getOne(planDefinitionId);

		PatientPlanDefinition ppd = new PatientPlanDefinition();
		ppd.setPatientUuid(UUID.fromString(patientUuid));
		ppd.setPlanDefinition(planDefinition);
		ppd.setDateAssigned(Instant.now());
		ppd.setCreatedDate(Calendar.getInstance());
		ppd.setModifiedDate(Calendar.getInstance());
		ppd.setStatus(PatientPlanDefinition.STATUS_ACTIVE);

		ppd = patientPlanDefinitionRepository.save(ppd);

		logger.info("Leaving assignPlanDefinitionToPatient()");
		return ppd;
	}

	@Transactional
	@Auditable(event = "Retrieve Plan Definitions assigned to Patient", argNames = "patientUuid")
	public List<PatientPlanDefinitionDto> retrievePlanDefinitionsAssignedToPatient(String patientUuid) {
		logger.info("Entering retrievePlanDefinitionsAssignedToPatient()");

		List<PatientPlanDefinitionDto> definitionDtos = new ArrayList<PatientPlanDefinitionDto>();
		List<PatientPlanDefinition> definitions = patientPlanDefinitionRepository.findAll();

		for (PatientPlanDefinition definition : definitions) {
			PatientPlanDefinitionDto dto = new PatientPlanDefinitionDto();
			dto.setPatientPlanDefinition(definition);
			definitionDtos.add(dto);
		}

		logger.info("Leaving retrievePlanDefinitionsAssignedToPatient(). # of definitions assigned = {}",
				definitions.size());
		return definitionDtos;
	}
}