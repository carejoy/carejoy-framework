package net.breezeware.carejoy.ccda;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Year;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Stream;

import org.apache.commons.lang3.StringUtils;
import org.eclipse.emf.common.util.EList;
import org.eclipse.mdht.uml.cda.Act;
import org.eclipse.mdht.uml.cda.AssignedAuthor;
import org.eclipse.mdht.uml.cda.Author;
import org.eclipse.mdht.uml.cda.ClinicalDocument;
import org.eclipse.mdht.uml.cda.CustodianOrganization;
import org.eclipse.mdht.uml.cda.Entry;
import org.eclipse.mdht.uml.cda.EntryRelationship;
import org.eclipse.mdht.uml.cda.LanguageCommunication;
import org.eclipse.mdht.uml.cda.Observation;
import org.eclipse.mdht.uml.cda.Participant2;
import org.eclipse.mdht.uml.cda.ParticipantRole;
import org.eclipse.mdht.uml.cda.PatientRole;
import org.eclipse.mdht.uml.cda.PlayingEntity;
import org.eclipse.mdht.uml.cda.RecordTarget;
import org.eclipse.mdht.uml.cda.Section;
import org.eclipse.mdht.uml.cda.StrucDocText;
import org.eclipse.mdht.uml.cda.util.CDAUtil;
import org.eclipse.mdht.uml.hl7.datatypes.AD;
import org.eclipse.mdht.uml.hl7.datatypes.ANY;
import org.eclipse.mdht.uml.hl7.datatypes.CD;
import org.eclipse.mdht.uml.hl7.datatypes.CE;
import org.eclipse.mdht.uml.hl7.datatypes.CS;
import org.eclipse.mdht.uml.hl7.datatypes.II;
import org.eclipse.mdht.uml.hl7.datatypes.IVL_TS;
import org.eclipse.mdht.uml.hl7.datatypes.IVXB_TS;
import org.eclipse.mdht.uml.hl7.datatypes.PN;
import org.eclipse.mdht.uml.hl7.datatypes.TEL;
import org.openhealthtools.mdht.uml.cda.consol.ConsolPackage;
import org.openhealthtools.mdht.uml.cda.consol.ContinuityOfCareDocument;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.testng.Assert;
import org.testng.annotations.Test;

import net.breezeware.carejoy.graph.entity.Address;
import net.breezeware.carejoy.graph.entity.CarejoyEntity;
import net.breezeware.carejoy.graph.entity.CodeableConcept;
import net.breezeware.carejoy.graph.entity.Communication;
import net.breezeware.carejoy.graph.entity.ContactPoint;
import net.breezeware.carejoy.graph.entity.EntitySource;
import net.breezeware.carejoy.graph.entity.HumanName;
import net.breezeware.carejoy.graph.entity.Organization;
import net.breezeware.carejoy.graph.entity.Patient;
import net.breezeware.carejoy.graph.entity.Person;
import net.breezeware.carejoy.graph.entity.Practitioner;
import net.breezeware.carejoy.graph.entity.VocabItem;
import net.breezeware.carejoy.graph.entity.clinical.Allergy;
import net.breezeware.carejoy.graph.entity.clinical.ClinicalDate;
import net.breezeware.carejoy.graph.entity.clinical.Reaction;
import net.breezeware.carejoy.graph.entity.clinical.SectionNegationIndicator;

enum DocumentType {

	CCDA_DOCUMENT_TYPE_CCD("ccd", "2.16.840.1.113883.10.20.22.1.2"),
	CCDA_DOCUMENT_TYPE_OPERATIVE_NOTE("operative_note", "2.16.840.1.113883.10.20.22.1.7"),
	CCDA_DOCUMENT_TYPE_DISCHARGE_SUMMARY("discharge_summary", "2.16.840.1.113883.10.20.22.1.8");

	private String name;
	private String code;

	private DocumentType(String name, String code) {
		this.name = name;
		this.code = code;
	}

	public String getName() {
		return name;
	}

	public String getCode() {
		return code;
	}

	public static Stream<DocumentType> stream() {
		return Stream.of(DocumentType.values());
	}

}

enum CCDASections {
	ALLERGIES(new String[] { "2.16.840.1.113883.10.20.22.2.6.1" }),
	ADVANCED_DIRECTIVES(new String[] { "2.16.840.1.113883.10.20.22.2.21", "2.16.840.1.113883.10.20.22.2.21.1" }),
	CONDITIONS(new String[] { "2.16.840.1.113883.10.20.22.2.5.1" }),
	DIAGNOSTICS(new String[] { "2.16.840.1.113883.10.20.22.2.3", "2.16.840.1.113883.10.20.22.2.3.1" }),
	ENCOUNTERS(new String[] { "2.16.840.1.113883.10.20.22.2.22", "2.16.840.1.113883.10.20.22.2.22.1" }),
	FAMILY_MEMBER(new String[] { "2.16.840.1.113883.10.20.22.2.15" }),
	IMMUNIZATION(new String[] { "2.16.840.1.113883.10.20.22.2.2" }),
	MEDICAL_ADMIN(new String[] { "2.16.840.1.113883.10.20.22.2.1", "2.16.840.1.113883.10.20.22.2.1.1" }),
	PROCEDURES(new String[] { "2.16.840.1.113883.10.20.22.2.7", "2.16.840.1.113883.10.20.22.2.7.1" }),
	VITALS(new String[] { "2.16.840.1.113883.10.20.22.2.4.1" });

	private String[] code;

	private CCDASections(String[] code) {
		this.code = code;
	}

	public String[] getCode() {
		return code;
	}

	public List<String> getCodeList() {
		return new ArrayList<>(Arrays.asList(code));
	}
}

enum Contact {
	WP("work place", 1), HP("primary home", 2), EC("emergency contact", 3), MC("mobile contact", 4),
	H("home address", 5), HV("vacation home", 6), DIR("Direct", 7), PUB("Public", 8), BAD("bad address", 9),
	TMP("temporary address", 10), AS("answering service", 11), PG("pager", 12);
	private String system;
	private int rank;
	private static Map<String, Contact> map = new HashMap<>();

	private Contact(String system, int rank) {
		this.system = system;
		this.rank = rank;
	}

	static {
		Arrays.stream(Contact.values()).forEach(contact -> map.put(contact.name(), contact));
	}

	public String getSystem() {
		return system;
	}

	public int getRank() {
		return rank;
	}

	public static Contact forCode(final String contact) {
		return map.get(contact);
	}
}

public class ParseCcdaTest {

	Logger logger = LoggerFactory.getLogger(ParseCcdaTest.class);

	String message = "Pratul";
	String fileName = "/Users/karthik/work/brz-projects/carejoy-refreshhealth/development/ccda/test-ready/ccd/BettyASherman_ccda.xml";
	File file = null;
	InputStream inputStream = null;
	ContinuityOfCareDocument ccdDocument = null;
	PatientRole patientRole = null;

	Patient patient = new Patient();
	Map<String, Section> sectionMap = new HashMap<>();
	List<Allergy> allergies = new ArrayList<Allergy>();

	@Test
	public void testReadFile() {
		logger.info("Testing testReadFile() ..");
		file = new File(fileName);
		Assert.assertNotNull(file);
		inputStream = readCcdaFile(file);
		Assert.assertNotNull(inputStream);
		logger.info("Finished testing testReadFile() ..");
	}

	@Test(dependsOnMethods = { "testReadFile" })
	public void testContinuityOfCareDocument() {
		logger.info("Testing testContinuityOfCareDocument() ..");
		ccdDocument = getContinuityOfCareDocument(inputStream, file);
		Assert.assertNotNull(ccdDocument);
		logger.info("Finished testing testContinuityOfCareDocument() ..");
	}

	@SuppressWarnings("unchecked")
	@Test(dependsOnMethods = { "testContinuityOfCareDocument" })
	public void testGetPatient() {
		logger.info("Testing testGetPatient() ..");
		PatientTest patientTest = new PatientTest(ccdDocument);
		Map<String, Object> recordMap = patientTest.getPatientRecordData();
		EList<AD> expectedAddress = (EList<AD>) recordMap.get("addressList");
		EList<TEL> expectedTelecom = (EList<TEL>) recordMap.get("telecom");
		org.eclipse.mdht.uml.cda.Patient patient = (org.eclipse.mdht.uml.cda.Patient) recordMap.get("patientObject");
		EList<LanguageCommunication> languageComm = (patient != null) ? patient.getLanguageCommunications() : null;
		Assert.assertEquals(expectedAddress.size(), 1);
		Assert.assertEquals(expectedTelecom.size(), 2);
		Assert.assertEquals(patient.getIds().size(), 1);
		Assert.assertEquals(languageComm.size(), 1);
		logger.info("Finished testing testGetPatient() ..");
	}

	@Test(dependsOnMethods = { "testGetPatient" })
	public void testAllSections() {
		long start = System.currentTimeMillis();
		// allSections takes the flat list of all the codes present in CCDASections Enum
		// this is done to quickly check the availability of templateId from ccda xml.
		Map<String, String> allSections = new HashMap<>();
		Arrays.stream(CCDASections.values())
				.forEach(data -> data.getCodeList().forEach(code -> allSections.put(code, data.name())));

		for (Section section : ccdDocument.getAllSections()) {
			if ((section.getNullFlavor() == null || (section.getNullFlavor() != null
					&& !(section.getNullFlavor().toString().equalsIgnoreCase("NI"))))) {
				String sectionName = getSection(section.getTemplateIds(), allSections);
				sectionMap.put(sectionName, section);
			}
		}

		long end = System.currentTimeMillis();
		logger.info("Total time with new approach: " + (end - start));
//		logger.info(sectionMap.size());
//		sectionMap.entrySet().forEach(entry -> {
//			logger.info(entry.getKey() + " " + entry.getValue());
//		});
		Assert.assertNotNull(sectionMap);
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testAllergies() {
		logger.info("Testing testGetAllergies() ..");
		EList<Entry> allergies = getAllergies();
		Assert.assertNotNull(allergies);
		Assert.assertEquals(allergies.size(), 1);
		logger.info("Finished testing testGetAllergies() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testAdvancedDirectives() {
		logger.info("Testing testAdvancedDirectives() ..");
		EList<Entry> advancedDirectives = getAdvancedDirectives();
		// Assert.assertEquals(advancedDirectives.size(), 0);
		Assert.assertNull(advancedDirectives);
		logger.info("Finished testing testAdvancedDirectives() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testConditions() {
		logger.info("Testing testConditions() ..");
		EList<Entry> conditions = getConditions();
		Assert.assertEquals(conditions.size(), 6);
		logger.info("Finished testing testConditions() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testDiagnostics() {
		logger.info("Testing testDiagnostics() ..");
		EList<Entry> diagnostics = getDiagnostics();
		Assert.assertEquals(diagnostics.size(), 11);
		logger.info("Finished testing testDiagnostics() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testEncounters() {
		logger.info("Testing testEncounters() ..");
		EList<Entry> encounters = getEncounters();
		Assert.assertEquals(encounters.size(), 16);
		logger.info("Finished testing testEncounters() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testFamilyMember() {
		logger.info("Testing testFamilyMember() ..");
		EList<Entry> familyMember = getFamily();
		Assert.assertEquals(familyMember.size(), 0);
		logger.info("Finished testing testFamilyMember() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testImmunization() {
		logger.info("Testing testImmunization() ..");
		EList<Entry> immunization = getImmunization();
		Assert.assertNull(immunization);
//		Assert.assertEquals(immunization.size(), 0);
		logger.info("Finished testing testImmunization() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testMedicalAdministration() {
		logger.info("Testing testMedicalAdministration() ..");
		EList<Entry> medicalAdministration = getMedicalAdministration();
		Assert.assertEquals(medicalAdministration.size(), 13);
		logger.info("Finished testing testMedicalAdministration() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testProcedures() {
		logger.info("Testing testProcedures() ..");
		EList<Entry> procedures = getProcedures();
		Assert.assertEquals(procedures.size(), 3);
		logger.info("Finished testing testProcedures() ..");
	}

	@Test(dependsOnMethods = { "testAllSections" })
	public void testVitals() {
		logger.info("Testing testVitals() ..");
		EList<Entry> vitals = getVitals();
		Assert.assertEquals(vitals.size(), 15);
		logger.info("Finished testing testVitals() ..");
	}

	private String getSection(EList<II> templateIdList, Map<String, String> allSections) {
		for (II item : templateIdList) {
			String sectionName = allSections.get(item.getRoot());
			if (sectionName != null) {
				return sectionName;
			}
		}
		return null;
	}

	private ContinuityOfCareDocument getContinuityOfCareDocument(InputStream inputStream, File file) {
		ContinuityOfCareDocument ccdDocument = null;
		try {
			ClinicalDocument cd = CDAUtil.load(inputStream);
			if (cd != null && cd.getTemplateIds() != null && cd.getTemplateIds().size() > 0) {
				DocumentType ccdaDocumentType = DocumentType.CCDA_DOCUMENT_TYPE_CCD;
				for (II templateId : cd.getTemplateIds()) {
					if (templateId.getRoot().equalsIgnoreCase(ccdaDocumentType.getCode())) {
						ccdaDocumentType = DocumentType.CCDA_DOCUMENT_TYPE_CCD;
						break;
					}
				}

				switch (ccdaDocumentType) {
				case CCDA_DOCUMENT_TYPE_CCD:
					inputStream = new FileInputStream(file);
					ccdDocument = (ContinuityOfCareDocument) CDAUtil.loadAs(inputStream,
							ConsolPackage.eINSTANCE.getContinuityOfCareDocument());
					logger.info("ccdDocument is not null ....");
					break;

				default:
					throw new Exception(
							"Could not parse document. CCDA document types other than CCD (Continuity of Care Document) are not supported at the moment.");
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				inputStream.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		return ccdDocument;
	}

	private InputStream readCcdaFile(File file) {
		InputStream inputStream = null;
		try {
			inputStream = new FileInputStream(file);
			logger.info("InputStream is not null ..");
		} catch (FileNotFoundException ex) {
			ex.printStackTrace();
		}
		return inputStream;
	}

	private EList<Entry> getAllergies() {
		Section section = sectionMap.get(CCDASections.ALLERGIES.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getAdvancedDirectives() {
		Section section = sectionMap.get(CCDASections.ADVANCED_DIRECTIVES.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getConditions() {
		Section section = sectionMap.get(CCDASections.CONDITIONS.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getDiagnostics() {
		Section section = sectionMap.get(CCDASections.DIAGNOSTICS.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getEncounters() {
		Section section = sectionMap.get(CCDASections.ENCOUNTERS.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getFamily() {
		Section section = sectionMap.get(CCDASections.FAMILY_MEMBER.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getImmunization() {
		Section section = sectionMap.get(CCDASections.IMMUNIZATION.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getMedicalAdministration() {
		Section section = sectionMap.get(CCDASections.MEDICAL_ADMIN.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getProcedures() {
		Section section = sectionMap.get(CCDASections.PROCEDURES.name());
		return (section != null) ? section.getEntries() : null;
	}

	private EList<Entry> getVitals() {
		Section section = sectionMap.get(CCDASections.VITALS.name());
		return (section != null) ? section.getEntries() : null;
	}

	private Patient getPatient(ContinuityOfCareDocument ccdDocument) {

		// create person for patient
		Person patientPerson = createPersonForPatient(ccdDocument);

		// create organization
		Organization patientOrganization = createOrganizationForPatient(ccdDocument);

		// create patient based on person
		Patient patient = new Patient();
		patient.setManagingOrganization(patientOrganization);
		patient.setPerson(patientPerson);
		patient.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		patient.setDateCreated(LocalDateTime.now());
		patient.setDateModified(LocalDateTime.now());
		patient.setUuid(UUID.randomUUID());

		return patient;
	}

	private Organization createOrganizationForPatient(ContinuityOfCareDocument ccdDocument) {
		Organization _organization = new Organization();
		List<Address> _addressList = new ArrayList<Address>();
		List<ContactPoint> _contactPointList = new ArrayList<ContactPoint>();

		_organization.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_organization.setUuid(UUID.randomUUID());
		_organization.setDateCreated(LocalDateTime.now());
		_organization.setDateModified(LocalDateTime.now());

		if (ccdDocument.getCustodian() != null && ccdDocument.getCustodian().getAssignedCustodian() != null
				&& ccdDocument.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization() != null) {
			CustodianOrganization organization = ccdDocument.getCustodian().getAssignedCustodian()
					.getRepresentedCustodianOrganization();
			for (AD address : organization.getAddrs()) {
				Address _address = createAddress(address);
				_addressList.add(_address);
			}
			_organization.setAddress(_addressList);

			for (TEL telecom : organization.getTelecoms()) {
				ContactPoint _contactPoint = createContactPoint(telecom);
				_contactPointList.add(_contactPoint);
			}
			_organization.setTelecom(_contactPointList);

			String organizationName = (organization.getName() == null) ? "" : organization.getName().getText();
			_organization.setName(organizationName);

			_organization.setType("Hospital");
			_organization.setAlias("");

		}
		return _organization;
	}

	private Person createPersonForPatient(ContinuityOfCareDocument ccdDocument) {

		List<Address> _addressList = new ArrayList<Address>();
		List<ContactPoint> _contactPointList = new ArrayList<ContactPoint>();
		List<HumanName> _humanNameList = new ArrayList<HumanName>();
		List<Communication> _languages = new ArrayList<Communication>();
		List<EntitySource> _entitySourceList = new ArrayList<EntitySource>();
		Person _person = new Person();

		// Getting list of record Targets
		for (RecordTarget recordTarget : ccdDocument.getRecordTargets()) {
			PatientRole patientRole = recordTarget.getPatientRole();

			// external identifiers
			EList<II> patientIds = patientRole.getIds();
			List<ExternalIdentifier> eIdsList = createExternalIdentifier(patientIds);
			_person.setExternalIdentifiers(eIdsList);

			for (AD address : patientRole.getAddrs()) {
				Address _address = createAddress(address);
				_addressList.add(_address);
			}
			_person.setAddress(_addressList);

			for (TEL telecom : patientRole.getTelecoms()) {
				ContactPoint _contactPoint = createContactPoint(telecom);
				_contactPointList.add(_contactPoint);
			}
			_person.setTelecom(_contactPointList);

			org.eclipse.mdht.uml.cda.Patient patient = patientRole.getPatient();
			if (patient != null) {
				for (PN name : patient.getNames()) {
					HumanName _humanName = createHumanName(name);
					_humanNameList.add(_humanName);
				}
				_person.setName(_humanNameList);

				CE genderCode = patient.getAdministrativeGenderCode();
				List<VocabItem> _genderCodes = new ArrayList<VocabItem>();
				if (genderCode != null) {
					try {
						_genderCodes.add(createVocabItem(genderCode));
					} catch (Exception e) {
					}

					for (CD translationCode : genderCode.getTranslations()) {
						try {
							_genderCodes.add(createVocabItem(translationCode));
						} catch (Exception e) {
						}

					}
				}
				_person.setGender(_genderCodes);

				// race
				try {
					_person.setRace(createVocabItem(patient.getRaceCode()));
				} catch (Exception e) {
				}

				// ethnicity
				try {
					_person.setEthnicity(createVocabItem(patient.getEthnicGroupCode()));
				} catch (Exception e) {
				}

				for (LanguageCommunication language : patient.getLanguageCommunications()) {
					Communication _language = new Communication();

					String langCode = (language.getLanguageCode() == null) ? "" : language.getLanguageCode().getCode();
					_language.setLanguageCode(langCode);

					String proficiencyCode = (language.getProficiencyLevelCode() == null) ? ""
							: language.getProficiencyLevelCode().getCode();
					_language.setProficiencyLevelCode(proficiencyCode);

					_language.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
					_language.setDateCreated(LocalDateTime.now());
					_language.setDateModified(LocalDateTime.now());
					_language.setUuid(UUID.randomUUID());
					_language.setDisplayName("");

					_languages.add(_language);
				}
				_person.setCommunication(_languages);

				String birthTime = patient.getBirthTime().getValue();
				_person.setBirthDate(createLocalDateTime(birthTime));
			}

			CE maritalStatusCode = patient.getMaritalStatusCode();
			List<VocabItem> _maritalStatusCodes = new ArrayList<VocabItem>();
			if (maritalStatusCode != null) {
				try {
					_maritalStatusCodes.add(createVocabItem(maritalStatusCode));
				} catch (Exception e) {
				}

				for (CD translationCode : maritalStatusCode.getTranslations()) {
					try {
						_maritalStatusCodes.add(createVocabItem(translationCode));
					} catch (Exception e) {
					}

				}
			}
			_person.setMaritalStatus(_maritalStatusCodes);

		}

		// Person_EntitySource = TODO
		EntitySource _entitySource = new EntitySource();
		_entitySource.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_entitySource.setActiveSource(true);
		_entitySource.setDateCreated(LocalDateTime.now());
		_entitySource.setDateFirstSourced(LocalDateTime.now());
		_entitySource.setDateLastSourced(LocalDateTime.now());
		_entitySource.setDateModified(LocalDateTime.now());
		_entitySource.setUuid(UUID.randomUUID());

		if (ccdDocument.getCustodian() != null && ccdDocument.getCustodian().getAssignedCustodian() != null
				&& ccdDocument.getCustodian().getAssignedCustodian().getRepresentedCustodianOrganization() != null) {
			CustodianOrganization organization = ccdDocument.getCustodian().getAssignedCustodian()
					.getRepresentedCustodianOrganization();
			String sourceName = (organization.getName() == null) ? "" : organization.getName().getText();
			_entitySource.setSource(sourceName);
			_entitySource.setSourceId(sourceName);

			String sourceId = (organization.getIds() == null || organization.getIds().size() == 0) ? ""
					: organization.getIds().get(0).toString();
			_entitySource.setSourceEntityId(sourceId);
		}
		_entitySource.setSourceType("CCDA");
		_entitySource.setSourceUrl("N/A");

		_entitySourceList.add(_entitySource);
		_person.setEntitySource(_entitySourceList);

		_person.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_person.setDateCreated(LocalDateTime.now());
		_person.setDateModified(LocalDateTime.now());
		_person.setUuid(UUID.randomUUID());

		return _person;
	}

	private List<ExternalIdentifier> createExternalIdentifier(EList<II> idsList) {
		List<ExternalIdentifier> eIdList = new ArrayList<ExternalIdentifier>();
		if (idsList != null) {
			for (II id : idsList) {
				if (id != null) {
					ExternalIdentifier eId = new ExternalIdentifier();
					eId.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
					eId.setAssigningAuthorityName(id.getAssigningAuthorityName());
					eId.setDateCreated(LocalDateTime.now());
					eId.setDateModified(LocalDateTime.now());
					eId.setExtension(id.getExtension());
					eId.setRoot(id.getRoot());
					eId.setUuid(UUID.randomUUID());
					eIdList.add(eId);
				}
			}
		}
		return eIdList;
	}

	private Address createAddress(AD address) {
		Address _address = new Address();
		_address.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_address.setDateCreated(LocalDateTime.now());
		_address.setDateModified(LocalDateTime.now());

		String city = (address.getCities() == null || address.getCities().size() == 0) ? ""
				: address.getCities().get(0).getText();
		_address.setCity(city);

		String country = (address.getCountries() == null || address.getCountries().size() == 0) ? ""
				: address.getCountries().get(0).getText();
		_address.setCountry(country);

		String line = (address.getStreetAddressLines() == null || address.getStreetAddressLines().size() == 0) ? ""
				: address.getStreetAddressLines().get(0).getText();
		_address.setLine(line);

		String postalCode = (address.getPostalCodes() == null || address.getPostalCodes().size() == 0) ? ""
				: address.getPostalCodes().get(0).getText();
		_address.setPostalCode(postalCode);

		String state = (address.getStates() == null || address.getStates().size() == 0) ? ""
				: address.getStates().get(0).getText();
		_address.setState(state);

		_address.setText("");
		_address.setType("");
		_address.setDistrict("");

		String use = (address.getUses() == null || address.getUses().size() == 0) ? ""
				: address.getUses().get(0).getName();
		_address.setUse(use);

		_address.setUuid(UUID.randomUUID());

		return _address;
	}

	private ContactPoint createContactPoint(TEL telecom) {
		ContactPoint _contactPoint = new ContactPoint();
		_contactPoint.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_contactPoint.setDateCreated(LocalDateTime.now());
		_contactPoint.setDateModified(LocalDateTime.now());

		String use = (telecom.getUses() == null || telecom.getUses().size() == 0) ? ""
				: telecom.getUses().get(0).getName();

		Contact contact = Contact.forCode(use);
		if (contact != null) {
			_contactPoint.setSystem(contact.getSystem());
			_contactPoint.setUse(use);
			_contactPoint.setRank(contact.getRank());
		} else {
			_contactPoint.setSystem("");
			_contactPoint.setUse("");
			_contactPoint.setRank(0);
		}

		/*
		 * switch (use) { case "WP": _contactPoint.setSystem("work place");
		 * _contactPoint.setUse(use); _contactPoint.setRank(1); break;
		 * 
		 * case "HP": _contactPoint.setSystem("primary home");
		 * _contactPoint.setUse(use); _contactPoint.setRank(2); break;
		 * 
		 * case "EC": _contactPoint.setSystem("emergency contact");
		 * _contactPoint.setUse(use); _contactPoint.setRank(3); break;
		 * 
		 * case "MC": _contactPoint.setSystem("mobile contact");
		 * _contactPoint.setUse(use); _contactPoint.setRank(4); break;
		 * 
		 * case "H": _contactPoint.setSystem("home address"); _contactPoint.setUse(use);
		 * _contactPoint.setRank(5); break;
		 * 
		 * case "HV": _contactPoint.setSystem("vacation home");
		 * _contactPoint.setUse(use); _contactPoint.setRank(6); break;
		 * 
		 * case "DIR": _contactPoint.setSystem("Direct"); _contactPoint.setUse(use);
		 * _contactPoint.setRank(7); break;
		 * 
		 * case "PUB": _contactPoint.setSystem("Public"); _contactPoint.setUse(use);
		 * _contactPoint.setRank(8); break;
		 * 
		 * case "BAD": _contactPoint.setSystem("bad address");
		 * _contactPoint.setUse(use); _contactPoint.setRank(9); break;
		 * 
		 * case "TMP": _contactPoint.setSystem("temporary address");
		 * _contactPoint.setUse(use); _contactPoint.setRank(10); break;
		 * 
		 * case "AS": _contactPoint.setSystem("answering service");
		 * _contactPoint.setUse(use); _contactPoint.setRank(11); break;
		 * 
		 * case "PG": _contactPoint.setSystem("pager"); _contactPoint.setUse(use);
		 * _contactPoint.setRank(12); break;
		 * 
		 * default: _contactPoint.setSystem(""); _contactPoint.setUse("");
		 * _contactPoint.setRank(0);
		 * 
		 * }
		 */

		_contactPoint.setUuid(UUID.randomUUID());
		_contactPoint.setValue(telecom.getValue());

		return _contactPoint;
	}

	private HumanName createHumanName(PN name) {
		HumanName _humanName = new HumanName();
		if (name != null) {
			_humanName.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
			_humanName.setDateCreated(LocalDateTime.now());
			_humanName.setDateModified(LocalDateTime.now());

			String family = (name.getFamilies() == null || name.getFamilies().size() == 0) ? ""
					: name.getFamilies().get(0).getText();
			_humanName.setFamily(family);

			String given = (name.getGivens() == null || name.getGivens().size() == 0) ? ""
					: name.getGivens().get(0).getText();
			_humanName.setGiven(given);

			String prefix = (name.getPrefixes() == null || name.getPrefixes().size() == 0) ? ""
					: name.getPrefixes().get(0).getText();
			_humanName.setPrefix(prefix);

			String suffix = (name.getSuffixes() == null || name.getSuffixes().size() == 0) ? ""
					: name.getSuffixes().get(0).getText();
			_humanName.setSuffix(suffix);

			_humanName.setText(name.getText());

			String use = (name.getUses() == null || name.getUses().size() == 0) ? "" : name.getUses().get(0).getName();
			_humanName.setUse(use);

			_humanName.setText("");
			_humanName.setUuid(UUID.randomUUID());

		}

		return _humanName;
	}

	private VocabItem createVocabItem(CD code) throws Exception {
		if (code != null && code.getCodeSystem() != null && code.getCode() != null) {
			VocabItem vi = new VocabItem();
			vi.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
			vi.setCode(code.getCode());
			vi.setCodeSystem(code.getCodeSystem());
			vi.setCodeSystemName(code.getCodeSystemName());
			vi.setCodeSystemVersion(code.getCodeSystemVersion());
			vi.setDateCreated(LocalDateTime.now());
			vi.setDateModified(LocalDateTime.now());
			vi.setDisplayName(code.getDisplayName());
			vi.setUuid(UUID.randomUUID());
			return vi;
		} else {
			return null;
		}
	}

	private LocalDateTime createLocalDateTime(String dtVal) {

		LocalDateTime ldt = null;

		if (dtVal != null) {
			dtVal = dtVal.trim();

			if (dtVal.length() > 12) {
				dtVal = dtVal.substring(0, 12);
			}

			if (dtVal.length() > 8 && dtVal.length() < 12) {
				dtVal = StringUtils.rightPad(dtVal, 12, "0");
			}

			if (dtVal.length() == 12) {
				ldt = LocalDateTime.parse(dtVal, DateTimeFormatter.ofPattern("yyyyMMddHHmm"));
			} else if (dtVal.length() == 4) {
				Year ld = Year.parse(dtVal, DateTimeFormatter.ofPattern("yyyy"));
				ldt = LocalDateTime.of(LocalDate.of(ld.getValue(), 1, 1), LocalTime.of(0, 0));
			} else if (dtVal.length() == 6) {
				LocalDate ld = YearMonth.parse(dtVal, DateTimeFormatter.ofPattern("yyyyMM")).atDay(1);
				ldt = LocalDateTime.of(ld, LocalTime.of(0, 0));
			} else if (dtVal.length() == 8) {
				LocalDate ld = LocalDate.parse(dtVal, DateTimeFormatter.ofPattern("yyyyMMdd"));
				ldt = LocalDateTime.of(ld, LocalTime.of(0, 0));
			}
		}
		return ldt;

	}

	private List<Allergy> getAllergies(Patient patient, ContinuityOfCareDocument ccdDocument) {

		List<Allergy> allergiesList = new ArrayList<Allergy>();
		boolean negationInd = false;

		for (Section section : ccdDocument.getAllSections()) {
			List<String> templateIds = new ArrayList<String>();
			templateIds.add("2.16.840.1.113883.10.20.22.2.6.1");
			if (hasTemplateId(section.getTemplateIds(), templateIds)
					&& (section.getNullFlavor() == null || (section.getNullFlavor() != null
							&& !(section.getNullFlavor().toString().equalsIgnoreCase("NI"))))) {
				for (Entry entry : section.getEntries()) {

					if (negationInd == true) {
						return allergiesList;
					}

					Allergy _allergy = new Allergy();
					List<CodeableConcept> _allergyCodeList = new ArrayList<CodeableConcept>();

					// set patient
					_allergy.setPatient(patient);

					List<Reaction> _reactionList = new ArrayList<Reaction>();
					Reaction _reaction = new Reaction();
					Act act = entry.getAct();
					if (act != null) {

						// assertedTime
						IVL_TS assertedDate = act.getEffectiveTime();
						if (assertedDate != null) {

							ClinicalDate _asserted = createClinicalDate(assertedDate);
							_allergy.setAssertedDate(_asserted);

						}

						// status
						CS status = act.getStatusCode();
						if (status != null) {
							_allergy.setClinicalStatus(status.getCode());
						}

						// author
						// TODO : Find the code of recorder(author) and segregate as either
						// recorderPractitioner or recorderPatient
						List<Practitioner> _recorderList = new ArrayList<Practitioner>();
						for (Author author : act.getAuthors()) {
							if (author.getAssignedAuthor() != null) {
								Practitioner _practitioner = convertAssignedAuthorToPractitioner(
										author.getAssignedAuthor());
								_recorderList.add(_practitioner);
							}
						}
						_allergy.setRecorderPractitioner(_recorderList);

						for (EntryRelationship entryRelationship : act.getEntryRelationships()) {

							Observation observation = entryRelationship.getObservation();
							if (observation != null) {

								// handling multiple reaction observation
								List<String> templateId1 = new ArrayList<String>();
								templateId1.add("2.16.840.1.113883.10.20.22.4.9");

								if (hasTemplateId(observation.getTemplateIds(), templateId1)) {

									Reaction _anotherReaction = new Reaction();

									for (ANY code : observation.getValues()) {

										if (code instanceof CD) {
											CD valueCode = (CD) code;

											try {
												_allergyCodeList.add(createCodeableConcept(section, valueCode));
											} catch (Exception e) {
											}

											for (CD translationCode : valueCode.getTranslations()) {
												try {
													_allergyCodeList
															.add(createCodeableConcept(section, translationCode));
												} catch (Exception e) {
												}
											}
										}
									}

									if (observation.getEffectiveTime() != null) {
										_anotherReaction.setOnset(createClinicalDate(observation.getEffectiveTime()));
									}

									if (!observation.getEntryRelationships().isEmpty()) {
										for (EntryRelationship entryRelationSeverity : observation
												.getEntryRelationships()) {
											Observation observationSeverity = entryRelationSeverity.getObservation();

											List<CodeableConcept> _severityList = new ArrayList<CodeableConcept>();
											for (ANY severityCode : observationSeverity.getValues()) {
												if (severityCode instanceof CD) {
													CD valueCode = (CD) severityCode;

													try {
														_severityList.add(createCodeableConcept(section, valueCode));
													} catch (Exception e) {
													}

													for (CD translationCode : valueCode.getTranslations()) {
														try {
															_severityList.add(
																	createCodeableConcept(section, translationCode));
														} catch (Exception e) {
														}
													}
												}

											}
											_anotherReaction.setSeverity(_severityList);
										}
									}
									_anotherReaction.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
									_anotherReaction.setDateCreated(LocalDateTime.now());
									_anotherReaction.setDateModified(LocalDateTime.now());
									_anotherReaction.setUuid(UUID.randomUUID());
									_reactionList.add(_anotherReaction);
									continue;
								}

								// negationInd
								if (observation.getNegationInd() != null
										&& observation.getNegationInd().toString().equals("true")) {
									if (act.getEffectiveTime() != null && act.getStatusCode() != null) {
										_allergy.setNegationInd(createNegationInd("allergy",
												act.getStatusCode().getCode(), act.getEffectiveTime()));
									} else if (act.getEffectiveTime() == null && act.getStatusCode() != null) {
										_allergy.setNegationInd(
												createNegationInd("allergy", act.getStatusCode().getCode(), null));
									} else if (act.getEffectiveTime() != null && act.getStatusCode() == null) {
										_allergy.setNegationInd(
												createNegationInd("allergy", null, act.getEffectiveTime()));
									} else {
										_allergy.setNegationInd(createNegationInd("allergy", null, null));
									}
									negationInd = true;
									break;
								}

								// allergyObservation
								// onset
								IVL_TS onset = observation.getEffectiveTime();
								if (onset != null) {
									ClinicalDate _onset = createClinicalDate(onset);
									_allergy.setOnset(_onset);
								}

								// category
								List<CodeableConcept> _categoryList = new ArrayList<CodeableConcept>();
								for (ANY value : observation.getValues()) {
									if (value instanceof CD) {
										CD valueCode = (CD) value;

										try {
											_categoryList.add(createCodeableConcept(section, valueCode));
										} catch (Exception e) {
										}

										for (CD translationCode : valueCode.getTranslations()) {
											try {
												_categoryList.add(createCodeableConcept(section, translationCode));
											} catch (Exception e) {
											}

										}
									}
								}
								_allergy.setCategory(_categoryList);

								// TODO : Informant(Asserter)
								observation.getInformants();

								// Reaction Substance
								for (Participant2 participant : observation.getParticipants()) {
									ParticipantRole participantRole = participant.getParticipantRole();
									if (participantRole != null) {
										PlayingEntity playingEntity = participantRole.getPlayingEntity();
										if (playingEntity != null) {
											List<CodeableConcept> _substanceCodes = new ArrayList<CodeableConcept>();
											CodeableConcept codeableConcept = null;
											CE substanceCode = playingEntity.getCode();
											if (substanceCode != null) {
												try {
													codeableConcept = createCodeableConcept(section, substanceCode);
													if (codeableConcept != null) {
														_substanceCodes.add(codeableConcept);
													}

												} catch (Exception e) {
												} finally {
													if (!playingEntity.getNames().isEmpty()
															&& codeableConcept == null) {
														for (PN playing : playingEntity.getNames()) {
															CodeableConcept codeableName = new CodeableConcept();
															codeableName.setOriginalText(playing.getText());
															_substanceCodes.add(codeableName);
														}
													}
												}

												for (CD translationCode : substanceCode.getTranslations()) {
													try {
														_substanceCodes
																.add(createCodeableConcept(section, translationCode));
													} catch (Exception e) {
													}
												}
											}

											_reaction.setSubstance(_substanceCodes);
										}
									}
								}

								for (EntryRelationship nestedEntryRelationship : observation.getEntryRelationships()) {
									Observation nestedObservation = nestedEntryRelationship.getObservation();

									for (II templateId : nestedObservation.getTemplateIds()) {

										switch (templateId.getRoot()) {

										// Reaction Observation
										case "2.16.840.1.113883.10.20.22.4.9":

											// Allergy Code
											for (ANY code : nestedObservation.getValues()) {
												if (code instanceof CD) {
													CD valueCode = (CD) code;

													try {
														_allergyCodeList.add(createCodeableConcept(section, valueCode));
													} catch (Exception e) {
													}

													for (CD translationCode : valueCode.getTranslations()) {
														try {
															_allergyCodeList.add(
																	createCodeableConcept(section, translationCode));
														} catch (Exception e) {
														}
													}
												}
											}

											if (nestedObservation.getEffectiveTime() != null) {
												_reaction.setOnset(
														createClinicalDate(nestedObservation.getEffectiveTime()));
											}

											if (!nestedObservation.getEntryRelationships().isEmpty()) {
												for (EntryRelationship entryRelationSeverity : nestedObservation
														.getEntryRelationships()) {
													Observation observationSeverity = entryRelationSeverity
															.getObservation();
													for (II templateIdSeverity : observationSeverity.getTemplateIds()) {
														switch (templateIdSeverity.getRoot()) {

														// Severity Observation
														case "2.16.840.1.113883.10.20.22.4.8":
															// Severity
															List<CodeableConcept> _severityList = new ArrayList<CodeableConcept>();
															for (ANY severityCode : observationSeverity.getValues()) {
																if (severityCode instanceof CD) {
																	CD valueCode = (CD) severityCode;

																	try {
																		_severityList.add(createCodeableConcept(section,
																				valueCode));
																	} catch (Exception e) {
																	}

																	for (CD translationCode : valueCode
																			.getTranslations()) {
																		try {
																			_severityList.add(createCodeableConcept(
																					section, translationCode));
																		} catch (Exception e) {
																		}
																	}
																}

															}
															_reaction.setSeverity(_severityList);

															break;

														// add any other conditions here in case there are multiple
														// nested
														// entries

														default:
															break;
														}
													}
												}
											}

											break;

										// add any nested templates

										default:
											break;

										}

									}

								}

							}
							_reaction.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
							_reaction.setDateCreated(LocalDateTime.now());
							_reaction.setDateModified(LocalDateTime.now());
							_reaction.setUuid(UUID.randomUUID());
							_reactionList.add(_reaction);

						}
						_allergy.setCode(_allergyCodeList);
						_allergy.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
						_allergy.setDateCreated(LocalDateTime.now());
						_allergy.setDateModified(LocalDateTime.now());
						_allergy.setUuid(UUID.randomUUID());
						_allergy.setReaction(_reactionList);

						// add allergy to list
						allergiesList.add(_allergy);
					}
				}
			}
		}
		return allergiesList;
	}

	private SectionNegationIndicator createNegationInd(String sectionName, String status, IVL_TS effectiveTime) {
		SectionNegationIndicator negationInd = new SectionNegationIndicator();

		negationInd.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		negationInd.setUuid(UUID.randomUUID());
		negationInd.setDateCreated(LocalDateTime.now());
		negationInd.setDateModified(LocalDateTime.now());

		if (status != null) {
			negationInd.setStatus(status);
		}

		if (sectionName != null) {
			negationInd.setSectionName(sectionName);
		}

		if (effectiveTime != null) {
			negationInd.setEffectiveTime(createClinicalDate(effectiveTime));
		}

		return negationInd;
	}

	private Practitioner convertAssignedAuthorToPractitioner(AssignedAuthor assignedAuthor) {
		Person _recorder = new Person();
		Practitioner _practitioner = new Practitioner();

		List<Address> _addressList = new ArrayList<Address>();
		List<ContactPoint> _contactPointList = new ArrayList<ContactPoint>();
		List<HumanName> _humanNameList = new ArrayList<HumanName>();

		for (AD address : assignedAuthor.getAddrs()) {
			Address _address = createAddress(address);
			_addressList.add(_address);
		}
		_recorder.setAddress(_addressList);

		for (TEL telecom : assignedAuthor.getTelecoms()) {
			ContactPoint _telecom = createContactPoint(telecom);
			_contactPointList.add(_telecom);
		}
		_recorder.setTelecom(_contactPointList);

		org.eclipse.mdht.uml.cda.Person assignedPerson = assignedAuthor.getAssignedPerson();
		if (assignedPerson != null) {
			for (PN name : assignedPerson.getNames()) {
				HumanName _humanName = createHumanName(name);
				_humanNameList.add(_humanName);
			}
		}
		_recorder.setName(_humanNameList);

		_recorder.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_recorder.setUuid(UUID.randomUUID());
		_recorder.setDateCreated(LocalDateTime.now());
		_recorder.setDateModified(LocalDateTime.now());

		// specialization
		CE code = assignedAuthor.getCode();
		if (code != null) {
			try {
				_practitioner.setSpecialization(createVocabItem(code));
			} catch (Exception e) {

			}
		}

		_practitioner.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		_practitioner.setDateCreated(LocalDateTime.now());
		_practitioner.setDateModified(LocalDateTime.now());
		_practitioner.setUuid(UUID.randomUUID());
		_practitioner.setPerson(_recorder);

		return _practitioner;
	}

	private boolean hasTemplateId(EList<II> templateIdList, List<String> requiredTemplateIdList) {
		boolean matched = false;
		for (II item : templateIdList) {
			for (String requiredTemplateId : requiredTemplateIdList) {
				if (item.getRoot().equals(requiredTemplateId)) {
					matched = true;
					break;
				}
			}
		}
		return matched;
	}

	private ClinicalDate createClinicalDate(IVL_TS effectiveTime) {
		ClinicalDate date = new ClinicalDate();

		if (effectiveTime != null) {
			if (effectiveTime.getLow() == null && effectiveTime.getHigh() == null && effectiveTime.getValue() != null) {
				String val = effectiveTime.getValue();
				date.setLow(createLocalDateTime(val));
			} else {
				IVXB_TS lowValue = effectiveTime.getLow();
				if (lowValue != null && lowValue.getValue() != null) {
					date.setLow(createLocalDateTime(lowValue.getValue()));
				}

				IVXB_TS highValue = effectiveTime.getHigh();
				if (highValue != null && highValue.getValue() != null) {
					date.setHigh(createLocalDateTime(highValue.getValue()));
				}
			}
		}

		date.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
		date.setDateCreated(LocalDateTime.now());
		date.setDateModified(LocalDateTime.now());
		date.setUuid(UUID.randomUUID());
		return date;
	}

	private CodeableConcept createCodeableConcept(Section section, CD code) throws Exception {
		CodeableConcept codeableConcept = null;

		if (code != null) {

			// original text via reference
			if (code.getOriginalText() != null && code.getOriginalText().getReference() != null
					&& code.getOriginalText().getReference().getValue() != null) {
				String textRefVal = code.getOriginalText().getReference().getValue();
				textRefVal = textRefVal.replaceAll("#", "");

				StrucDocText strucDocText = section.getText();

				if (textRefVal != null && strucDocText != null) {
					if (strucDocText.getText(textRefVal) != null) {
						codeableConcept = new CodeableConcept();
						codeableConcept.setOriginalText(strucDocText.getText(textRefVal));
					}
				}
			}
			// original text without reference
			else if (code.getOriginalText() != null) {

				codeableConcept = new CodeableConcept();
				codeableConcept.setOriginalText(code.getOriginalText().getText());
			}
		} else {
			throw new Exception("Code received is Null. Could not create Codeable Concept.");
		}

		// vocab item
		try {
			/*
			 * This will be used when we will start using the code mapping service, where
			 * each code will have a unique name. Until then we have to take the code using
			 * all it's parameters to save in Graph database
			 */
			// VocabItem vi = createVocabItem(code);
			VocabItem vi = createVocabItemUseAllParam(code);
			if (vi != null) {
				if (codeableConcept == null) {
					codeableConcept = new CodeableConcept();
				}
				codeableConcept.setVocabItem(vi);
			}
		} catch (Exception e) {
		}

		if (codeableConcept == null) {
			throw new Exception("Could not created codeable concept as both vocab item and original text not found.");
			// return null;
		} else {
			return codeableConcept;
		}
	}

	private VocabItem createVocabItemUseAllParam(CD code) throws Exception {

		if (code != null && code.getCodeSystem() != null && code.getCode() != null) {
			VocabItem vi = new VocabItem();
			if (code.getCodeSystemName() != null && code.getCodeSystemName().equalsIgnoreCase("LOINC")
					|| code.getCodeSystem().equalsIgnoreCase("2.16.840.1.113883.6.1")) {

				vi.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
				vi.setCode(code.getCode());
				vi.setCodeSystem(code.getCodeSystem());
				vi.setCodeSystemName(code.getCodeSystemName());
				vi.setCodeSystemVersion(code.getCodeSystemVersion());
				vi.setDateCreated(LocalDateTime.now());
				vi.setDateModified(LocalDateTime.now());
				vi.setDisplayName(code.getDisplayName());
				vi.setUuid(UUID.randomUUID());
			} else {
				vi = new VocabItem();
				vi.setEntityState(CarejoyEntity.ENTITY_STATE_ACTIVE);
				vi.setCode(code.getCode());
				vi.setCodeSystem(code.getCodeSystem());
				vi.setCodeSystemName(code.getCodeSystemName());
				vi.setCodeSystemVersion(code.getCodeSystemVersion());
				vi.setDateCreated(LocalDateTime.now());
				vi.setDateModified(LocalDateTime.now());
				vi.setDisplayName(code.getDisplayName());
				vi.setUuid(UUID.randomUUID());

			}
			return vi;

		} else {
			throw new Exception("Code received is Null. Could not create Vocab Item.");
		}
	}
}
